@startuml

class PatientActivity {
     BottomNavigationView bottomNavigationView
     TextView titleText
    + replaceFragment(Fragment fragment)
}

class pt_newAppointment_fr {
          +{static}String treatmentType
          +{static}String drName
          -Activity activity
          -Button buttonDoc
          -Button buttonTreat
          -Button buttonSearch
    -createDoctorPopup(View v)
}

class pt_home_fr {
    -setupDialog()
}

class pt_CalendarFr {
    -RecyclerView recyclerView
    -options()
}

class pt_Appoints_fr {
    Query query
    -RecyclerView recyclerView
    -options()
}
class SplashActivity {
    +{static}SPLASH_TIME_OUT
    + getUriFromRawFile(Context context,int rawResourceId)
    + {static}loading()
}
class RegisterActivity{
-FirebaseAuth mAuth
-{static}String TAG
-String email
-String password
-EditText EtEmail
-EditText EtPassword
-EditText EtConfirm
-EditText EtName
-Button BtnSignUp
-FBAuthHelper fbAuthHelper
-FBUserHelper fsUserHelper
-checkPasswordValidity(String password, String confirm)
-checkEmailValidity(String email)
+createUserSuccess(FirebaseUser user)
+createUserFail()
+addUserSuccess(String id)
}
class LoginActivity{
    -EditText EtEmail
    -EditText EtPassword
    -Button BtnLogIn
    -Button BtnSignUp
    -FBAuthHelper fbAuthHelper
    -checkPasswordValidity(String password)
    -checkEmailValidity(String email)
    +loginSuccess(FirebaseUser user)
}
class ActivityDoctorAppointments{
    Button btnDatePicker, buttonSubmit, btnLogOut
    EditText name, treatment
    -int currentYear, currentMonth, currentDay, currentHour, currentMinute
    -int Year1, Month1, Day1
    -Date date
    -setupDialog()
    -setTime()
}
class PtFreeAppointmentAdapter{
 -Context context
 -setupDialog(Appointment appointment, String id)
 -performAddAction(Appointment appointment,String id)
}
class PtCalendarAdapter{
-Context context
-setupDialog(Appointment appointment, String id)
 -performDeleteAction(Appointment appointment,String id)
}

class FBUserHelper{
    -{static}String TAG
    +{static}FirebaseFirestore DataBase
    -{static}FBUserHelper.FBReply fbReply
    -{static}FirebaseUser currentUser
    -{static}CollectionReference collectionRef
    -{static}CollectionReference collectionRefAppointment
    +add(User user)
    +update(String id, User user)
}
interface FBUserHelper_FBReply {
    getAllSuccess(ArrayList<User> users)
    getOneSuccess(User user)
    addUserSuccess(String id)
}
class FBAuthHelper{
    + {static} FirebaseAuth mAuth
    - FBReply fbReply
    - {static} String TAG
    Activity activity
    + {static} FirebaseUser getCurrentUser()
    + boolean isLoggedIn()
    + void createUser(String email, String password)
    + void login(String email, String password)
}
 interface AppointmentsCallback {
        List<Appointment> onAppointmentsLoaded(List<Appointment> appointments)
        void onAppointmentsError(Exception e)
}
interface RemoveAppointmentsCallback {
        void onAppointmentsRemoved()
        void onAppointmentsError(Exception e)
}

interface AddAppointmentCallback {
        void onAppointmentAdded(String appointmentId)
        void onAppointmentError(Exception e)
}
interface FBAuthHelper_FBReply{
        + void createUserSuccess(FirebaseUser user)
        + void loginSuccess(FirebaseUser user)
}
class AppointmentHelper {
+ {static} void getUserAppointments(AppointmentsCallback callback)
+ {static} void scheduleNotification(Context context, Appointment appointment)
+ {static} void stopAlarm(Context context, Appointment appointment)
+ {static} void addAppointmentToUser( Appointment appointment, AddAppointmentCallback callback)
+ {static} void removeAppointment(String id, RemoveAppointmentsCallback callback)
}
class User {
String name
ArrayList<Appointment> appointments
}
class Appointment{
    + Date date
    + String drname
    + String treatmentType
    + UUID alarm
}
class NotificationWorker{
- {static} String CHANNEL_ID
+ Result doWork()
- void showNotification()
}
PatientActivity --> pt_CalendarFr :manages
PatientActivity --> pt_Appoints_fr :manages
PatientActivity --> pt_home_fr :manages
PatientActivity --> pt_newAppointment_fr :manages
AppointmentHelper --* AppointmentsCallback
AppointmentHelper --* RemoveAppointmentsCallback
AppointmentHelper --* AddAppointmentCallback
FBAuthHelper --* FBAuthHelper_FBReply
FBUserHelper --* FBUserHelper_FBReply
RegisterActivity --> FBAuthHelper: uses
LoginActivity --> FBUserHelper: uses
PtCalendarAdapter --> AppointmentHelper: uses
PtFreeAppointmentAdapter --> AppointmentHelper: uses
AppointmentHelper --> Appointment: manages
ActivityDoctorAppointments --> AppointmentHelper: uses
FBUserHelper --> User: uses
FBAuthHelper --> User: uses
AppointmentHelper --> NotificationWorker: sets up
pt_CalendarFr --> PtCalendarAdapter: uses
pt_Appoints_fr --> PtFreeAppointmentAdapter: uses
AppointmentHelper --> User: uses
@enduml
